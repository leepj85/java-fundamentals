/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

import static java.lang.Math.random;

public class Library {
    public static boolean someLibraryMethod() {
        return true;
    }


    public static int[] roll(int n) {
        int[] results = new int[n];
//        int[] dice = new int[] {1, 2, 3, 4, 5, 6};
        for (int i = 0; i < results.length; i++) {
            results[i] = (int) (Math.random() * 6) + 1;
        }
        System.out.println(Arrays.toString(results));
        return results;
    }

    public static boolean containsDuplicates(int[] input) {
        boolean isDuplicate = false;
        if (input.length > 0) {
            aa:
            for (int i = 0; i < input.length - 1; i++) {
                bb:
                for (int x = i + 1; x < input.length; x++) {
                    if (input[i] == input[x]) {
                        isDuplicate = true;
                        break aa;
                    }
                }
            }
        }
        return isDuplicate;
    }

    public static float calculateAvg(int[] input) {
        float avg = 0f;
        for (int i = 0; i < input.length; i++) {
            avg += input[i];
        }
        if (input.length > 0) {
            avg = avg / input.length;
        }
//        System.out.println(avg);
        return avg;
    }

    public static int[] calcArrayofArrayAvg(int[][] input) {
        float[] avgs = new float[input.length];
        int index = 0;
        //calculate averages for each array and insert into avgs[].
        for (int i = 0; i < avgs.length; i++) {
            avgs[i] = calculateAvg(input[i]);
        }
        System.out.println(Arrays.toString(avgs));
        //find index position of array with lowest average.
        for (int x = 0; x < avgs.length - 1; x++) {
            if (avgs[x+1] < avgs[x]) {
                index = x + 1;
            }
        }
        return input[index];
    }

    public static String analyzeWeatherData() {
        String results;
        // Daily average temperatures for Seattle, October 1-28 2017
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Set<Integer> temperatures = new HashSet<>();
        int minTemp = 1000;
        int maxTemp = 0;
        for (int[] tempArr : weeklyMonthTemperatures) {
            for (int temp : tempArr) {
                if (temp < minTemp) {
                    minTemp = temp;
                }
                maxTemp = (temp > maxTemp) ? temp : maxTemp;
                temperatures.add(temp);
            }
        }
        results = "High: " + maxTemp + '\n' + "Low: " + minTemp;
        for (int i = minTemp + 1; i < maxTemp; i++) {
            if (!temperatures.contains(i)) {
                results += '\n' + "Never saw temperature: " + i;
            }
        }
//        System.out.println("here is the results: " + '\n' + results);
        return results;
    }

    public static String tallyElection(List<String> votes) {
        Map<String, Integer> counterMap = new HashMap<>();
        for (String e : votes) {
            if (!counterMap.containsKey(e)) {
                counterMap.put(e, 1);
            } else {
                counterMap.put(e, counterMap.get(e) + 1);
            }
        }
        String winner = "";
        int totalVotes = 0;
        for (String key : counterMap.keySet()) {
            if (counterMap.get(key) > totalVotes) {
                winner = key;
                totalVotes = counterMap.get(key);
            }
        }
//        System.out.println("THIS IF THE WINNER: " + winner);
        return winner + " received the most votes!";
    }


}
